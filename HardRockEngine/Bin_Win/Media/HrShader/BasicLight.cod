//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer PerObject
{
    float4x4 g_worldViewProj;           // Offset:    0, size:   64
    float4x4 g_world;                   // Offset:   64, size:   64
    float4x4 g_worldInvTranspose;       // Offset:  128, size:   64
    Material g_material;                // Offset:  192, size:   48
}

cbuffer PerFrame
{
    DirLight g_lights[3];               // Offset:    0, size:  192
    float3  g_eyePos;                   // Offset:  192, size:   12
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float4x4 g_world;                  // Offset:   64 Size:    64
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SV_POSITION              0   xyzw        1      POS   float   xyzw
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.pos.x; v0.y <- vin.pos.y; v0.z <- vin.pos.z; 
                //   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; 
                //   o2.x <- <VS return value>.normal.x; o2.y <- <VS return value>.normal.y; o2.z <- <VS return value>.normal.z; 
                //   o1.x <- <VS return value>.posH.x; o1.y <- <VS return value>.posH.y; o1.z <- <VS return value>.posH.z; o1.w <- <VS return value>.posH.w; 
                //   o0.x <- <VS return value>.posTrans.x; o0.y <- <VS return value>.posTrans.y; o0.z <- <VS return value>.posTrans.z
                //
                #line 36 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- vout.posTrans.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- vout.posTrans.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- vout.posTrans.z
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- vout.posH.x
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- vout.posH.y
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // r2.z <- vout.posH.z
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // r2.w <- vout.posH.w
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.normal.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.normal.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.normal.z
                mov o1.xyzw, r2.xyzw
                mov o0.xyz, r1.xyzx
                mov o2.xyz, r0.xyzx
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64 [unused]
                //   float4x4 g_world;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48
                //
                // }
                //
                // cbuffer PerFrame
                // {
                //
                //   struct DirLight
                //   {
                //       
                //       float4 ambient;                // Offset:    0
                //       float4 diffuse;                // Offset:   16
                //       float4 specular;               // Offset:   32
                //       float3 dir;                    // Offset:   48
                //       float unused;                  // Offset:   60
                //
                //   } g_lights[3];                     // Offset:    0 Size:   192
                //   float3 g_eyePos;                   // Offset:  192 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                // PerFrame                          cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SV_POSITION              0   xyzw        1      POS   float       
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[13], immediateIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 14
                //
                // Initial variable locations:
                //   v0.x <- pin.posTrans.x; v0.y <- pin.posTrans.y; v0.z <- pin.posTrans.z; 
                //   v1.x <- pin.posH.x; v1.y <- pin.posH.y; v1.z <- pin.posH.z; v1.w <- pin.posH.w; 
                //   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 46 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                mov r0.xyz, -v0.xyzx
                add r0.xyz, r0.xyzx, cb1[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                
                #line 50
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v2.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z
                
                #line 54
                mov r2.xyz, l(0,0,0,0)  // r2.x <- A.x; r2.y <- A.y; r2.z <- A.z
                mov r3.xyz, l(0,0,0,0)  // r3.x <- D.x; r3.y <- D.y; r3.z <- D.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 62
                nop 
                mov r5.xyz, cb0[12].xyzx
                mov r6.xyz, cb0[13].xyzx
                mov r7.xyzw, cb0[14].xyzw
                mov r8.xyz, cb1[0].xyzx
                mov r9.xyz, cb1[1].xyzx
                mov r10.xyz, cb1[2].xyzx
                mov r11.xyz, cb1[3].xyzx
                mov r1.xyz, r1.xyzx
                mov r0.xyz, r0.xyzx
                
                #line 63 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\Light.fx"
                mov r12.xyz, l(0,0,0,0)  // r12.x <- diffuse.x; r12.y <- diffuse.y; r12.z <- diffuse.z
                mov r13.xyz, l(0,0,0,0)  // r13.x <- specular.x; r13.y <- specular.y; r13.z <- specular.z
                
                #line 67
                mul r5.xyz, r5.xyzx, r8.xyzx  // r5.x <- ambient.x; r5.y <- ambient.y; r5.z <- ambient.z
                
                #line 71
                dp3 r0.w, r1.xyzx, r11.xyzx
                mov r0.w, -r0.w  // r0.w <- diffFactor
                
                #line 75
                itof r1.w, l(0)
                lt r1.w, r1.w, r0.w
                
                #line 78
                mul r6.xyz, r6.xyzx, r9.xyzx
                mul r6.xyz, r0.wwww, r6.xyzx  // r6.x <- diffuse.x; r6.y <- diffuse.y; r6.z <- diffuse.z
                dp3 r0.w, r11.xyzx, r1.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                add r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- refLight.x; r1.y <- refLight.y; r1.z <- refLight.z
                dp3 r0.x, r1.xyzx, r0.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r7.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r10.xxyz
                mul r0.xyz, r0.xxxx, r0.yzwy  // r0.x <- specular.x; r0.y <- specular.y; r0.z <- specular.z
                movc r1.xyz, r1.wwww, r6.xyzx, r12.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r0.xyz, r1.wwww, r0.xyzx, r13.xyzx
                
                #line 62 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- ambient.x; r5.y <- ambient.y; r5.z <- ambient.z
                mov r1.xyz, r1.xyzx  // r1.x <- diff.x; r1.y <- diff.y; r1.z <- diff.z
                mov r0.xyz, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                add r2.xyz, r2.xyzx, r5.xyzx
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 69
                add r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                mov r0.w, cb0[13].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 56 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float4x4 g_world;                  // Offset:   64 Size:    64
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SV_POSITION              0   xyzw        1      POS   float   xyzw
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.pos.x; v0.y <- vin.pos.y; v0.z <- vin.pos.z; 
                //   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; 
                //   o2.x <- <VS return value>.normal.x; o2.y <- <VS return value>.normal.y; o2.z <- <VS return value>.normal.z; 
                //   o1.x <- <VS return value>.posH.x; o1.y <- <VS return value>.posH.y; o1.z <- <VS return value>.posH.z; o1.w <- <VS return value>.posH.w; 
                //   o0.x <- <VS return value>.posTrans.x; o0.y <- <VS return value>.posTrans.y; o0.z <- <VS return value>.posTrans.z
                //
                #line 36 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- vout.posTrans.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- vout.posTrans.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- vout.posTrans.z
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- vout.posH.x
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- vout.posH.y
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // r2.z <- vout.posH.z
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // r2.w <- vout.posH.w
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.normal.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.normal.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.normal.z
                mov o1.xyzw, r2.xyzw
                mov o0.xyz, r1.xyzx
                mov o2.xyz, r0.xyzx
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64 [unused]
                //   float4x4 g_world;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48
                //
                // }
                //
                // cbuffer PerFrame
                // {
                //
                //   struct DirLight
                //   {
                //       
                //       float4 ambient;                // Offset:    0
                //       float4 diffuse;                // Offset:   16
                //       float4 specular;               // Offset:   32
                //       float3 dir;                    // Offset:   48
                //       float unused;                  // Offset:   60
                //
                //   } g_lights[3];                     // Offset:    0 Size:   192
                //   float3 g_eyePos;                   // Offset:  192 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                // PerFrame                          cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SV_POSITION              0   xyzw        1      POS   float       
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[13], dynamicIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 19
                //
                // Initial variable locations:
                //   v0.x <- pin.posTrans.x; v0.y <- pin.posTrans.y; v0.z <- pin.posTrans.z; 
                //   v1.x <- pin.posH.x; v1.y <- pin.posH.y; v1.z <- pin.posH.z; v1.w <- pin.posH.w; 
                //   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 43 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                mov r0.x, l(2)  // r0.x <- numLights
                
                #line 46
                mov r0.yzw, -v0.xxyz
                add r0.yzw, r0.yyzw, cb1[12].xxyz  // r0.y <- toEye.x; r0.z <- toEye.y; r0.w <- toEye.z
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.x, r1.x
                mul r0.yzw, r0.yyzw, r1.xxxx
                
                #line 50
                dp3 r1.x, v2.xyzx, v2.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z
                
                #line 54
                mov r2.xyz, l(0,0,0,0)  // r2.x <- A.x; r2.y <- A.y; r2.z <- A.z
                mov r3.xyz, l(0,0,0,0)  // r3.x <- D.x; r3.y <- D.y; r3.z <- D.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 59
                mov r1.w, l(0)  // r1.w <- i
                mov r5.xyz, r2.xyzx  // r5.x <- A.x; r5.y <- A.y; r5.z <- A.z
                mov r6.xyz, r3.xyzx  // r6.x <- D.x; r6.y <- D.y; r6.z <- D.z
                mov r7.xyz, r4.xyzx  // r7.x <- S.x; r7.y <- S.y; r7.z <- S.z
                mov r2.w, r1.w  // r2.w <- i
                loop 
                  ilt r3.w, r2.w, r0.x
                  breakc_z r3.w
                
                #line 62
                  nop 
                  mov r8.xyz, cb0[12].xyzx
                  mov r9.xyz, cb0[13].xyzx
                  mov r10.xyzw, cb0[14].xyzw
                  imul null, r3.w, r2.w, l(4)
                  mov r11.xyz, cb1[r3.w + 0].xyzx
                  mov r12.xyz, cb1[r3.w + 1].xyzx
                  mov r13.xyz, cb1[r3.w + 2].xyzx
                  mov r14.xyz, cb1[r3.w + 3].xyzx
                  mov r15.xyz, r1.xyzx
                  mov r16.xyz, r0.yzwy
                
                #line 63 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\Light.fx"
                  mov r17.xyz, l(0,0,0,0)  // r17.x <- diffuse.x; r17.y <- diffuse.y; r17.z <- diffuse.z
                  mov r18.xyz, l(0,0,0,0)  // r18.x <- specular.x; r18.y <- specular.y; r18.z <- specular.z
                
                #line 67
                  mul r8.xyz, r8.xyzx, r11.xyzx  // r8.x <- ambient.x; r8.y <- ambient.y; r8.z <- ambient.z
                
                #line 71
                  dp3 r3.w, r15.xyzx, r14.xyzx
                  mov r3.w, -r3.w  // r3.w <- diffFactor
                
                #line 75
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r3.w
                
                #line 78
                  mul r9.xyz, r9.xyzx, r12.xyzx
                  mul r9.xyz, r3.wwww, r9.xyzx  // r9.x <- diffuse.x; r9.y <- diffuse.y; r9.z <- diffuse.z
                  dp3 r3.w, r14.xyzx, r15.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r11.xyz, r3.wwww, r15.xyzx
                  add r11.xyz, r14.xyzx, r11.xyzx  // r11.x <- refLight.x; r11.y <- refLight.y; r11.z <- refLight.z
                  dp3 r3.w, r11.xyzx, r16.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r10.w
                  exp r3.w, r3.w  // r3.w <- specFactor
                  mul r10.xyz, r10.xyzx, r13.xyzx
                  mul r10.xyz, r3.wwww, r10.xyzx  // r10.x <- specular.x; r10.y <- specular.y; r10.z <- specular.z
                  movc r9.xyz, r4.wwww, r9.xyzx, r17.xyzx
                  movc r10.xyz, r4.wwww, r10.xyzx, r18.xyzx
                
                #line 62 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                  mov r8.xyz, r8.xyzx  // r8.x <- ambient.x; r8.y <- ambient.y; r8.z <- ambient.z
                  mov r9.xyz, r9.xyzx  // r9.x <- diff.x; r9.y <- diff.y; r9.z <- diff.z
                  mov r10.xyz, r10.xyzx  // r10.x <- spec.x; r10.y <- spec.y; r10.z <- spec.z
                  add r5.xyz, r5.xyzx, r8.xyzx
                  add r6.xyz, r6.xyzx, r9.xyzx
                  add r7.xyz, r7.xyzx, r10.xyzx
                  iadd r2.w, r2.w, l(1)
                endloop 
                
                #line 69
                add r0.xyz, r5.xyzx, r6.xyzx
                add r0.xyz, r7.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                mov r0.w, cb0[13].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 68 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float4x4 g_world;                  // Offset:   64 Size:    64
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SV_POSITION              0   xyzw        1      POS   float   xyzw
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.pos.x; v0.y <- vin.pos.y; v0.z <- vin.pos.z; 
                //   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; 
                //   o2.x <- <VS return value>.normal.x; o2.y <- <VS return value>.normal.y; o2.z <- <VS return value>.normal.z; 
                //   o1.x <- <VS return value>.posH.x; o1.y <- <VS return value>.posH.y; o1.z <- <VS return value>.posH.z; o1.w <- <VS return value>.posH.w; 
                //   o0.x <- <VS return value>.posTrans.x; o0.y <- <VS return value>.posTrans.y; o0.z <- <VS return value>.posTrans.z
                //
                #line 36 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- vout.posTrans.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- vout.posTrans.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- vout.posTrans.z
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- vout.posH.x
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- vout.posH.y
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // r2.z <- vout.posH.z
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // r2.w <- vout.posH.w
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.normal.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.normal.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.normal.z
                mov o1.xyzw, r2.xyzw
                mov o0.xyz, r1.xyzx
                mov o2.xyz, r0.xyzx
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer PerObject
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64 [unused]
                //   float4x4 g_world;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_worldInvTranspose;      // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } g_material;                      // Offset:  192 Size:    48
                //
                // }
                //
                // cbuffer PerFrame
                // {
                //
                //   struct DirLight
                //   {
                //       
                //       float4 ambient;                // Offset:    0
                //       float4 diffuse;                // Offset:   16
                //       float4 specular;               // Offset:   32
                //       float3 dir;                    // Offset:   48
                //       float unused;                  // Offset:   60
                //
                //   } g_lights[3];                     // Offset:    0 Size:   192
                //   float3 g_eyePos;                   // Offset:  192 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PerObject                         cbuffer      NA          NA    0        1
                // PerFrame                          cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SV_POSITION              0   xyzw        1      POS   float       
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[13], dynamicIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 19
                //
                // Initial variable locations:
                //   v0.x <- pin.posTrans.x; v0.y <- pin.posTrans.y; v0.z <- pin.posTrans.z; 
                //   v1.x <- pin.posH.x; v1.y <- pin.posH.y; v1.z <- pin.posH.z; v1.w <- pin.posH.w; 
                //   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 43 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                mov r0.x, l(3)  // r0.x <- numLights
                
                #line 46
                mov r0.yzw, -v0.xxyz
                add r0.yzw, r0.yyzw, cb1[12].xxyz  // r0.y <- toEye.x; r0.z <- toEye.y; r0.w <- toEye.z
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.x, r1.x
                mul r0.yzw, r0.yyzw, r1.xxxx
                
                #line 50
                dp3 r1.x, v2.xyzx, v2.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z
                
                #line 54
                mov r2.xyz, l(0,0,0,0)  // r2.x <- A.x; r2.y <- A.y; r2.z <- A.z
                mov r3.xyz, l(0,0,0,0)  // r3.x <- D.x; r3.y <- D.y; r3.z <- D.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 59
                mov r1.w, l(0)  // r1.w <- i
                mov r5.xyz, r2.xyzx  // r5.x <- A.x; r5.y <- A.y; r5.z <- A.z
                mov r6.xyz, r3.xyzx  // r6.x <- D.x; r6.y <- D.y; r6.z <- D.z
                mov r7.xyz, r4.xyzx  // r7.x <- S.x; r7.y <- S.y; r7.z <- S.z
                mov r2.w, r1.w  // r2.w <- i
                loop 
                  ilt r3.w, r2.w, r0.x
                  breakc_z r3.w
                
                #line 62
                  nop 
                  mov r8.xyz, cb0[12].xyzx
                  mov r9.xyz, cb0[13].xyzx
                  mov r10.xyzw, cb0[14].xyzw
                  imul null, r3.w, r2.w, l(4)
                  mov r11.xyz, cb1[r3.w + 0].xyzx
                  mov r12.xyz, cb1[r3.w + 1].xyzx
                  mov r13.xyz, cb1[r3.w + 2].xyzx
                  mov r14.xyz, cb1[r3.w + 3].xyzx
                  mov r15.xyz, r1.xyzx
                  mov r16.xyz, r0.yzwy
                
                #line 63 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\Light.fx"
                  mov r17.xyz, l(0,0,0,0)  // r17.x <- diffuse.x; r17.y <- diffuse.y; r17.z <- diffuse.z
                  mov r18.xyz, l(0,0,0,0)  // r18.x <- specular.x; r18.y <- specular.y; r18.z <- specular.z
                
                #line 67
                  mul r8.xyz, r8.xyzx, r11.xyzx  // r8.x <- ambient.x; r8.y <- ambient.y; r8.z <- ambient.z
                
                #line 71
                  dp3 r3.w, r15.xyzx, r14.xyzx
                  mov r3.w, -r3.w  // r3.w <- diffFactor
                
                #line 75
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r3.w
                
                #line 78
                  mul r9.xyz, r9.xyzx, r12.xyzx
                  mul r9.xyz, r3.wwww, r9.xyzx  // r9.x <- diffuse.x; r9.y <- diffuse.y; r9.z <- diffuse.z
                  dp3 r3.w, r14.xyzx, r15.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r11.xyz, r3.wwww, r15.xyzx
                  add r11.xyz, r14.xyzx, r11.xyzx  // r11.x <- refLight.x; r11.y <- refLight.y; r11.z <- refLight.z
                  dp3 r3.w, r11.xyzx, r16.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r10.w
                  exp r3.w, r3.w  // r3.w <- specFactor
                  mul r10.xyz, r10.xyzx, r13.xyzx
                  mul r10.xyz, r3.wwww, r10.xyzx  // r10.x <- specular.x; r10.y <- specular.y; r10.z <- specular.z
                  movc r9.xyz, r4.wwww, r9.xyzx, r17.xyzx
                  movc r10.xyz, r4.wwww, r10.xyzx, r18.xyzx
                
                #line 62 "E:\Workspace\HrGithub\HrToy\HardRockEngine\Bin_Win\HrShader\BasicLight.fx"
                  mov r8.xyz, r8.xyzx  // r8.x <- ambient.x; r8.y <- ambient.y; r8.z <- ambient.z
                  mov r9.xyz, r9.xyzx  // r9.x <- diff.x; r9.y <- diff.y; r9.z <- diff.z
                  mov r10.xyz, r10.xyzx  // r10.x <- spec.x; r10.y <- spec.y; r10.z <- spec.z
                  add r5.xyz, r5.xyzx, r8.xyzx
                  add r6.xyz, r6.xyzx, r9.xyzx
                  add r7.xyz, r7.xyzx, r10.xyzx
                  iadd r2.w, r2.w, l(1)
                endloop 
                
                #line 69
                add r0.xyz, r5.xyzx, r6.xyzx
                add r0.xyz, r7.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                mov r0.w, cb0[13].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 68 instruction slots used
                            
            };
        }

    }

}

